/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import listener.OutputListener;
import command.Command;
import command.JarSignerCommand;
import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author kadir
 */
public class ApkBuilder extends javax.swing.JFrame {

    /**
     * Creates new form ApkBuilder
     */
    
    Thread processExecutor;
    OutputListener outputListener = new OutputListener() {
        @Override
        public void dispatchOutput(String output) {
           getOutputLog().setText(getOutputLog().getText()+"\n"+output);
        }
    }; 
    Command commandProcessor = new Command();
    private Preferences prefs;
    private String homeDirectory;
    public ApkBuilder() {
        initComponents();
        prefs = Preferences.userRoot().node(getClass().getName());
        homeDirectory = System.getProperty("user.home");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jarSignerDirectory = new javax.swing.JTextField();
        sha1ApkDirectory = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sha2ApkDirectory = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        keyStoreDirectory = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        keyStorePasswd = new javax.swing.JTextField();
        runCommand = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SHA2 Creator", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(82, 1, 1))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(22, 22, 22));
        jPanel1.setToolTipText("");
        jPanel1.setAutoscrolls(true);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Jarsigner Directory :");

        jarSignerDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jarSignerDirectoryMouseClicked(evt);
            }
        });
        jarSignerDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jarSignerDirectoryActionPerformed(evt);
            }
        });

        sha1ApkDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sha1ApkDirectoryMouseClicked(evt);
            }
        });
        sha1ApkDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sha1ApkDirectoryActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("SHA1 APK Directory :");

        sha2ApkDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sha2ApkDirectoryMouseClicked(evt);
            }
        });
        sha2ApkDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sha2ApkDirectoryActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("SHA2 Ouput Directory :");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("KeyStore Directory :");

        keyStoreDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keyStoreDirectoryMouseClicked(evt);
            }
        });
        keyStoreDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyStoreDirectoryActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("KeyStore Password :");

        keyStorePasswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyStorePasswdActionPerformed(evt);
            }
        });

        runCommand.setBackground(new java.awt.Color(163, 163, 128));
        runCommand.setText("Create");
        runCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCommandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(runCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(jarSignerDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(sha1ApkDirectory)
                    .addComponent(keyStoreDirectory)
                    .addComponent(sha2ApkDirectory)
                    .addComponent(keyStorePasswd))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jarSignerDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sha1ApkDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sha2ApkDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(keyStoreDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(keyStorePasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(70, 13, 13))); // NOI18N

        outputLog.setColumns(20);
        outputLog.setRows(5);
        outputLog.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(outputLog);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jarSignerDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jarSignerDirectoryActionPerformed
        // TODO add your handling code here:
        
        showFileChooser(jarSignerDirectory, JFileChooser.DIRECTORIES_ONLY, false, prefs.get("jarSignerDirectory", homeDirectory), "jarSignerDirectory" );

    }//GEN-LAST:event_jarSignerDirectoryActionPerformed

    private void sha2ApkDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sha2ApkDirectoryActionPerformed
        // TODO add your handling code here:
     showFileChooser(sha2ApkDirectory, JFileChooser.DIRECTORIES_ONLY, false, prefs.get("sha2ApkDirectory", homeDirectory), "sha2ApkDirectory");

    }//GEN-LAST:event_sha2ApkDirectoryActionPerformed

    private void keyStoreDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyStoreDirectoryActionPerformed
     showFileChooser(keyStoreDirectory, JFileChooser.FILES_ONLY, true, prefs.get("keyStoreDirectory", homeDirectory), "keyStoreDirectory");

        // TODO add your handling code here:
    }//GEN-LAST:event_keyStoreDirectoryActionPerformed

    private void keyStorePasswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyStorePasswdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyStorePasswdActionPerformed

    private void runCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCommandActionPerformed

        JarSignerCommand jarSigner = new JarSignerCommand();
        jarSigner.setWorkingDirectory(new File(jarSignerDirectory.getText().trim()));
        jarSigner.setKeyStorePath(keyStoreDirectory.getText().trim());
        jarSigner.setKeyStorePassWord(keyStorePasswd.getText().trim());
        jarSigner.setSigAlgo("SHA256withRSA");
        jarSigner.setDigestAlgo("SHA-256");
        jarSigner.setNewSignedSha2ApkPath(sha2ApkDirectory.getText().trim().concat("/").
                concat(new File(sha1ApkDirectory.getText()).getName().replace(".apk", "_sha2_nza_.apk")));
        jarSigner.setSignedSha1ApkPath(sha1ApkDirectory.getText().trim());
        jarSigner.setExtraCommand("sugotoku");
        jarSigner.setCommandString(jarSigner.buildCommand());
        jarSigner.setOutputListener(outputListener);
        
        
         new Thread(new Runnable() {
            @Override
            public void run() {
             String oldName, newName;  
             jarSigner.runCommand();
             zipAlign(jarSigner.getNewSignedSha2ApkPath());
             oldName = jarSigner.getNewSignedSha2ApkPath().replace("_nza_", "");
             newName = oldName.replace(".apk", ".zip");
             renameFile(oldName, newName);
             removeCertFile(newName, "CERT.RSA");
             removeCertFile(newName, "CERT.SF");
             renameFile(newName, oldName);
            }
        }).start();
        
    }//GEN-LAST:event_runCommandActionPerformed

    private void jarSignerDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jarSignerDirectoryMouseClicked
        // TODO add your handling code here:
        showFileChooser(jarSignerDirectory, JFileChooser.DIRECTORIES_ONLY, false, prefs.get("jarSignerDirectory", homeDirectory), "jarSignerDirectory");
    }//GEN-LAST:event_jarSignerDirectoryMouseClicked

    private void sha1ApkDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sha1ApkDirectoryActionPerformed
        // TODO add your handling code here:
        showFileChooser(sha1ApkDirectory, JFileChooser.FILES_ONLY, true, prefs.get("sha1ApkDirectory", homeDirectory),"sha1ApkDirectory");
    }//GEN-LAST:event_sha1ApkDirectoryActionPerformed

    private void sha1ApkDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sha1ApkDirectoryMouseClicked
        // TODO add your handling code here:
     showFileChooser(sha1ApkDirectory, JFileChooser.FILES_ONLY, true, prefs.get("sha1ApkDirectory", homeDirectory),"sha1ApkDirectory");
    }//GEN-LAST:event_sha1ApkDirectoryMouseClicked

    private void sha2ApkDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sha2ApkDirectoryMouseClicked
        showFileChooser(sha2ApkDirectory, JFileChooser.DIRECTORIES_ONLY, false, prefs.get("sha2ApkDirectory", homeDirectory),"sha2ApkDirectory");

        // TODO add your handling code here:
    }//GEN-LAST:event_sha2ApkDirectoryMouseClicked

    private void keyStoreDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyStoreDirectoryMouseClicked
        // TODO add your handling code here:
     showFileChooser(keyStoreDirectory, JFileChooser.FILES_ONLY, true, prefs.get("keyStoreDirectory", homeDirectory), "keyStoreDirectory");
    }//GEN-LAST:event_keyStoreDirectoryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApkBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApkBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApkBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApkBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApkBuilder().setVisible(true);
            }
        });
    }

    private javax.swing.JFileChooser jFileChooser;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jarSignerDirectory;
    private javax.swing.JTextField keyStoreDirectory;
    private javax.swing.JTextField keyStorePasswd;
    private javax.swing.JTextArea outputLog;
    private javax.swing.JButton runCommand;
    private javax.swing.JTextField sha1ApkDirectory;
    private javax.swing.JTextField sha2ApkDirectory;
    // End of variables declaration//GEN-END:variables

    private void showFileChooser(JTextField inputField, int mode, boolean flag, String lastFilePath, String pathKey) 
    {
        jFileChooser = new JFileChooser(lastFilePath);
        jFileChooser.setFileHidingEnabled(flag);
        jFileChooser.setFileSelectionMode(mode);
        jFileChooser.showOpenDialog(ApkBuilder.this);
        inputField.setText(jFileChooser.getSelectedFile().getAbsolutePath());
        prefs.put(pathKey, jFileChooser.getSelectedFile().getAbsolutePath());
    }

    public javax.swing.JTextArea getOutputLog() {
        return outputLog;
    }

    public void setOutputLog(javax.swing.JTextArea outputLog) {
        this.outputLog = outputLog;
    }
    
    private void zipAlign(String newSignedSha2ApkPath) 
    {
        Command zipAlign = new Command();
        zipAlign.setCommandString("zipalign 4 " + newSignedSha2ApkPath +" "+ newSignedSha2ApkPath.replace("_nza_", ""));
        zipAlign.setOutputListener(outputListener);
        zipAlign.runCommand();       
    }
    
    private void removeCertFile(String fileName, String certFile) 
    {
        Command rmvCert = new Command();
        rmvCert.setCommandString("zip -d " + fileName +" "+ "META-INF/\\"+ certFile);
        rmvCert.setOutputListener(outputListener);
        rmvCert.runCommand();        
    
    }
    
    private void renameFile(String oldName, String newName) 
    {
       Command rename = new Command();
       rename.setCommandString("mv -f " + oldName +" " + newName);
       rename.setOutputListener(outputListener);
       rename.runCommand();
    }
    
    private void makeZip(JarSignerCommand jarSigner) 
    {
        Command zipCommand = new Command();
        zipCommand.setCommandString("7z a" + " Protected.zip"+ " -pbjit2sn " + sha2ApkDirectory.getText().trim() );
        zipCommand.setOutputListener(outputListener);
        zipCommand.setWorkingDirectory(new File(sha2ApkDirectory.getText().trim()));
        zipCommand.runCommand();
    }
    
    private void deleteFile(JarSignerCommand jarSigner)
    {
        Command deleteCommand = new Command();
        deleteCommand.setCommandString("rm " + jarSigner.getNewSignedSha2ApkPath() );
        deleteCommand.setOutputListener(outputListener);
        deleteCommand.setWorkingDirectory(new File(sha2ApkDirectory.getText().trim()));
        deleteCommand.runCommand();
    }
}
